#define _CFFI_

/* We try to define Py_LIMITED_API before including Python.h.

   Mess: we can only define it if Py_DEBUG, Py_TRACE_REFS and
   Py_REF_DEBUG are not defined.  This is a best-effort approximation:
   we can learn about Py_DEBUG from pyconfig.h, but it is unclear if
   the same works for the other two macros.  Py_DEBUG implies them,
   but not the other way around.

   Issue #350 is still open: on Windows, the code here causes it to link
   with PYTHON36.DLL (for example) instead of PYTHON3.DLL.  A fix was
   attempted in 164e526a5515 and 14ce6985e1c3, but reverted: virtualenv
   does not make PYTHON3.DLL available, and so the "correctly" compiled
   version would not run inside a virtualenv.  We will re-apply the fix
   after virtualenv has been fixed for some time.  For explanation, see
   issue #355.  For a workaround if you want PYTHON3.DLL and don't worry
   about virtualenv, see issue #350.  See also 'py_limited_api' in
   setuptools_ext.py.
*/
#if !defined(_CFFI_USE_EMBEDDING) && !defined(Py_LIMITED_API)
#  include <pyconfig.h>
#  if !defined(Py_DEBUG) && !defined(Py_TRACE_REFS) && !defined(Py_REF_DEBUG)
#    define Py_LIMITED_API
#  endif
#endif

#include <Python.h>
#ifdef __cplusplus
extern "C" {
#endif
#include <stddef.h>

/* This part is from file 'cffi/parse_c_type.h'.  It is copied at the
   beginning of C sources generated by CFFI's ffi.set_source(). */

typedef void *_cffi_opcode_t;

#define _CFFI_OP(opcode, arg)   (_cffi_opcode_t)(opcode | (((uintptr_t)(arg)) << 8))
#define _CFFI_GETOP(cffi_opcode)    ((unsigned char)(uintptr_t)cffi_opcode)
#define _CFFI_GETARG(cffi_opcode)   (((intptr_t)cffi_opcode) >> 8)

#define _CFFI_OP_PRIMITIVE       1
#define _CFFI_OP_POINTER         3
#define _CFFI_OP_ARRAY           5
#define _CFFI_OP_OPEN_ARRAY      7
#define _CFFI_OP_STRUCT_UNION    9
#define _CFFI_OP_ENUM           11
#define _CFFI_OP_FUNCTION       13
#define _CFFI_OP_FUNCTION_END   15
#define _CFFI_OP_NOOP           17
#define _CFFI_OP_BITFIELD       19
#define _CFFI_OP_TYPENAME       21
#define _CFFI_OP_CPYTHON_BLTN_V 23   // varargs
#define _CFFI_OP_CPYTHON_BLTN_N 25   // noargs
#define _CFFI_OP_CPYTHON_BLTN_O 27   // O  (i.e. a single arg)
#define _CFFI_OP_CONSTANT       29
#define _CFFI_OP_CONSTANT_INT   31
#define _CFFI_OP_GLOBAL_VAR     33
#define _CFFI_OP_DLOPEN_FUNC    35
#define _CFFI_OP_DLOPEN_CONST   37
#define _CFFI_OP_GLOBAL_VAR_F   39
#define _CFFI_OP_EXTERN_PYTHON  41

#define _CFFI_PRIM_VOID          0
#define _CFFI_PRIM_BOOL          1
#define _CFFI_PRIM_CHAR          2
#define _CFFI_PRIM_SCHAR         3
#define _CFFI_PRIM_UCHAR         4
#define _CFFI_PRIM_SHORT         5
#define _CFFI_PRIM_USHORT        6
#define _CFFI_PRIM_INT           7
#define _CFFI_PRIM_UINT          8
#define _CFFI_PRIM_LONG          9
#define _CFFI_PRIM_ULONG        10
#define _CFFI_PRIM_LONGLONG     11
#define _CFFI_PRIM_ULONGLONG    12
#define _CFFI_PRIM_FLOAT        13
#define _CFFI_PRIM_DOUBLE       14
#define _CFFI_PRIM_LONGDOUBLE   15

#define _CFFI_PRIM_WCHAR        16
#define _CFFI_PRIM_INT8         17
#define _CFFI_PRIM_UINT8        18
#define _CFFI_PRIM_INT16        19
#define _CFFI_PRIM_UINT16       20
#define _CFFI_PRIM_INT32        21
#define _CFFI_PRIM_UINT32       22
#define _CFFI_PRIM_INT64        23
#define _CFFI_PRIM_UINT64       24
#define _CFFI_PRIM_INTPTR       25
#define _CFFI_PRIM_UINTPTR      26
#define _CFFI_PRIM_PTRDIFF      27
#define _CFFI_PRIM_SIZE         28
#define _CFFI_PRIM_SSIZE        29
#define _CFFI_PRIM_INT_LEAST8   30
#define _CFFI_PRIM_UINT_LEAST8  31
#define _CFFI_PRIM_INT_LEAST16  32
#define _CFFI_PRIM_UINT_LEAST16 33
#define _CFFI_PRIM_INT_LEAST32  34
#define _CFFI_PRIM_UINT_LEAST32 35
#define _CFFI_PRIM_INT_LEAST64  36
#define _CFFI_PRIM_UINT_LEAST64 37
#define _CFFI_PRIM_INT_FAST8    38
#define _CFFI_PRIM_UINT_FAST8   39
#define _CFFI_PRIM_INT_FAST16   40
#define _CFFI_PRIM_UINT_FAST16  41
#define _CFFI_PRIM_INT_FAST32   42
#define _CFFI_PRIM_UINT_FAST32  43
#define _CFFI_PRIM_INT_FAST64   44
#define _CFFI_PRIM_UINT_FAST64  45
#define _CFFI_PRIM_INTMAX       46
#define _CFFI_PRIM_UINTMAX      47
#define _CFFI_PRIM_FLOATCOMPLEX 48
#define _CFFI_PRIM_DOUBLECOMPLEX 49
#define _CFFI_PRIM_CHAR16       50
#define _CFFI_PRIM_CHAR32       51

#define _CFFI__NUM_PRIM         52
#define _CFFI__UNKNOWN_PRIM           (-1)
#define _CFFI__UNKNOWN_FLOAT_PRIM     (-2)
#define _CFFI__UNKNOWN_LONG_DOUBLE    (-3)

#define _CFFI__IO_FILE_STRUCT         (-1)


struct _cffi_global_s {
    const char *name;
    void *address;
    _cffi_opcode_t type_op;
    void *size_or_direct_fn;  // OP_GLOBAL_VAR: size, or 0 if unknown
                              // OP_CPYTHON_BLTN_*: addr of direct function
};

struct _cffi_getconst_s {
    unsigned long long value;
    const struct _cffi_type_context_s *ctx;
    int gindex;
};

struct _cffi_struct_union_s {
    const char *name;
    int type_index;          // -> _cffi_types, on a OP_STRUCT_UNION
    int flags;               // _CFFI_F_* flags below
    size_t size;
    int alignment;
    int first_field_index;   // -> _cffi_fields array
    int num_fields;
};
#define _CFFI_F_UNION         0x01   // is a union, not a struct
#define _CFFI_F_CHECK_FIELDS  0x02   // complain if fields are not in the
                                     // "standard layout" or if some are missing
#define _CFFI_F_PACKED        0x04   // for CHECK_FIELDS, assume a packed struct
#define _CFFI_F_EXTERNAL      0x08   // in some other ffi.include()
#define _CFFI_F_OPAQUE        0x10   // opaque

struct _cffi_field_s {
    const char *name;
    size_t field_offset;
    size_t field_size;
    _cffi_opcode_t field_type_op;
};

struct _cffi_enum_s {
    const char *name;
    int type_index;          // -> _cffi_types, on a OP_ENUM
    int type_prim;           // _CFFI_PRIM_xxx
    const char *enumerators; // comma-delimited string
};

struct _cffi_typename_s {
    const char *name;
    int type_index;   /* if opaque, points to a possibly artificial
                         OP_STRUCT which is itself opaque */
};

struct _cffi_type_context_s {
    _cffi_opcode_t *types;
    const struct _cffi_global_s *globals;
    const struct _cffi_field_s *fields;
    const struct _cffi_struct_union_s *struct_unions;
    const struct _cffi_enum_s *enums;
    const struct _cffi_typename_s *typenames;
    int num_globals;
    int num_struct_unions;
    int num_enums;
    int num_typenames;
    const char *const *includes;
    int num_types;
    int flags;      /* future extension */
};

struct _cffi_parse_info_s {
    const struct _cffi_type_context_s *ctx;
    _cffi_opcode_t *output;
    unsigned int output_size;
    size_t error_location;
    const char *error_message;
};

struct _cffi_externpy_s {
    const char *name;
    size_t size_of_result;
    void *reserved1, *reserved2;
};

#ifdef _CFFI_INTERNAL
static int parse_c_type(struct _cffi_parse_info_s *info, const char *input);
static int search_in_globals(const struct _cffi_type_context_s *ctx,
                             const char *search, size_t search_len);
static int search_in_struct_unions(const struct _cffi_type_context_s *ctx,
                                   const char *search, size_t search_len);
#endif

/* this block of #ifs should be kept exactly identical between
   c/_cffi_backend.c, cffi/vengine_cpy.py, cffi/vengine_gen.py
   and cffi/_cffi_include.h */
#if defined(_MSC_VER)
# include <malloc.h>   /* for alloca() */
# if _MSC_VER < 1600   /* MSVC < 2010 */
   typedef __int8 int8_t;
   typedef __int16 int16_t;
   typedef __int32 int32_t;
   typedef __int64 int64_t;
   typedef unsigned __int8 uint8_t;
   typedef unsigned __int16 uint16_t;
   typedef unsigned __int32 uint32_t;
   typedef unsigned __int64 uint64_t;
   typedef __int8 int_least8_t;
   typedef __int16 int_least16_t;
   typedef __int32 int_least32_t;
   typedef __int64 int_least64_t;
   typedef unsigned __int8 uint_least8_t;
   typedef unsigned __int16 uint_least16_t;
   typedef unsigned __int32 uint_least32_t;
   typedef unsigned __int64 uint_least64_t;
   typedef __int8 int_fast8_t;
   typedef __int16 int_fast16_t;
   typedef __int32 int_fast32_t;
   typedef __int64 int_fast64_t;
   typedef unsigned __int8 uint_fast8_t;
   typedef unsigned __int16 uint_fast16_t;
   typedef unsigned __int32 uint_fast32_t;
   typedef unsigned __int64 uint_fast64_t;
   typedef __int64 intmax_t;
   typedef unsigned __int64 uintmax_t;
# else
#  include <stdint.h>
# endif
# if _MSC_VER < 1800   /* MSVC < 2013 */
#  ifndef __cplusplus
    typedef unsigned char _Bool;
#  endif
# endif
#else
# include <stdint.h>
# if (defined (__SVR4) && defined (__sun)) || defined(_AIX) || defined(__hpux)
#  include <alloca.h>
# endif
#endif

#ifdef __GNUC__
# define _CFFI_UNUSED_FN  __attribute__((unused))
#else
# define _CFFI_UNUSED_FN  /* nothing */
#endif

#ifdef __cplusplus
# ifndef _Bool
   typedef bool _Bool;   /* semi-hackish: C++ has no _Bool; bool is builtin */
# endif
#endif

/**********  CPython-specific section  **********/
#ifndef PYPY_VERSION


#if PY_MAJOR_VERSION >= 3
# define PyInt_FromLong PyLong_FromLong
#endif

#define _cffi_from_c_double PyFloat_FromDouble
#define _cffi_from_c_float PyFloat_FromDouble
#define _cffi_from_c_long PyInt_FromLong
#define _cffi_from_c_ulong PyLong_FromUnsignedLong
#define _cffi_from_c_longlong PyLong_FromLongLong
#define _cffi_from_c_ulonglong PyLong_FromUnsignedLongLong
#define _cffi_from_c__Bool PyBool_FromLong

#define _cffi_to_c_double PyFloat_AsDouble
#define _cffi_to_c_float PyFloat_AsDouble

#define _cffi_from_c_int(x, type)                                        \
    (((type)-1) > 0 ? /* unsigned */                                     \
        (sizeof(type) < sizeof(long) ?                                   \
            PyInt_FromLong((long)x) :                                    \
         sizeof(type) == sizeof(long) ?                                  \
            PyLong_FromUnsignedLong((unsigned long)x) :                  \
            PyLong_FromUnsignedLongLong((unsigned long long)x)) :        \
        (sizeof(type) <= sizeof(long) ?                                  \
            PyInt_FromLong((long)x) :                                    \
            PyLong_FromLongLong((long long)x)))

#define _cffi_to_c_int(o, type)                                          \
    ((type)(                                                             \
     sizeof(type) == 1 ? (((type)-1) > 0 ? (type)_cffi_to_c_u8(o)        \
                                         : (type)_cffi_to_c_i8(o)) :     \
     sizeof(type) == 2 ? (((type)-1) > 0 ? (type)_cffi_to_c_u16(o)       \
                                         : (type)_cffi_to_c_i16(o)) :    \
     sizeof(type) == 4 ? (((type)-1) > 0 ? (type)_cffi_to_c_u32(o)       \
                                         : (type)_cffi_to_c_i32(o)) :    \
     sizeof(type) == 8 ? (((type)-1) > 0 ? (type)_cffi_to_c_u64(o)       \
                                         : (type)_cffi_to_c_i64(o)) :    \
     (Py_FatalError("unsupported size for type " #type), (type)0)))

#define _cffi_to_c_i8                                                    \
                 ((int(*)(PyObject *))_cffi_exports[1])
#define _cffi_to_c_u8                                                    \
                 ((int(*)(PyObject *))_cffi_exports[2])
#define _cffi_to_c_i16                                                   \
                 ((int(*)(PyObject *))_cffi_exports[3])
#define _cffi_to_c_u16                                                   \
                 ((int(*)(PyObject *))_cffi_exports[4])
#define _cffi_to_c_i32                                                   \
                 ((int(*)(PyObject *))_cffi_exports[5])
#define _cffi_to_c_u32                                                   \
                 ((unsigned int(*)(PyObject *))_cffi_exports[6])
#define _cffi_to_c_i64                                                   \
                 ((long long(*)(PyObject *))_cffi_exports[7])
#define _cffi_to_c_u64                                                   \
                 ((unsigned long long(*)(PyObject *))_cffi_exports[8])
#define _cffi_to_c_char                                                  \
                 ((int(*)(PyObject *))_cffi_exports[9])
#define _cffi_from_c_pointer                                             \
    ((PyObject *(*)(char *, struct _cffi_ctypedescr *))_cffi_exports[10])
#define _cffi_to_c_pointer                                               \
    ((char *(*)(PyObject *, struct _cffi_ctypedescr *))_cffi_exports[11])
#define _cffi_get_struct_layout                                          \
    not used any more
#define _cffi_restore_errno                                              \
    ((void(*)(void))_cffi_exports[13])
#define _cffi_save_errno                                                 \
    ((void(*)(void))_cffi_exports[14])
#define _cffi_from_c_char                                                \
    ((PyObject *(*)(char))_cffi_exports[15])
#define _cffi_from_c_deref                                               \
    ((PyObject *(*)(char *, struct _cffi_ctypedescr *))_cffi_exports[16])
#define _cffi_to_c                                                       \
    ((int(*)(char *, struct _cffi_ctypedescr *, PyObject *))_cffi_exports[17])
#define _cffi_from_c_struct                                              \
    ((PyObject *(*)(char *, struct _cffi_ctypedescr *))_cffi_exports[18])
#define _cffi_to_c_wchar_t                                               \
    ((_cffi_wchar_t(*)(PyObject *))_cffi_exports[19])
#define _cffi_from_c_wchar_t                                             \
    ((PyObject *(*)(_cffi_wchar_t))_cffi_exports[20])
#define _cffi_to_c_long_double                                           \
    ((long double(*)(PyObject *))_cffi_exports[21])
#define _cffi_to_c__Bool                                                 \
    ((_Bool(*)(PyObject *))_cffi_exports[22])
#define _cffi_prepare_pointer_call_argument                              \
    ((Py_ssize_t(*)(struct _cffi_ctypedescr *,                           \
                    PyObject *, char **))_cffi_exports[23])
#define _cffi_convert_array_from_object                                  \
    ((int(*)(char *, struct _cffi_ctypedescr *, PyObject *))_cffi_exports[24])
#define _CFFI_CPIDX  25
#define _cffi_call_python                                                \
    ((void(*)(struct _cffi_externpy_s *, char *))_cffi_exports[_CFFI_CPIDX])
#define _cffi_to_c_wchar3216_t                                           \
    ((int(*)(PyObject *))_cffi_exports[26])
#define _cffi_from_c_wchar3216_t                                         \
    ((PyObject *(*)(int))_cffi_exports[27])
#define _CFFI_NUM_EXPORTS 28

struct _cffi_ctypedescr;

static void *_cffi_exports[_CFFI_NUM_EXPORTS];

#define _cffi_type(index)   (                           \
    assert((((uintptr_t)_cffi_types[index]) & 1) == 0), \
    (struct _cffi_ctypedescr *)_cffi_types[index])

static PyObject *_cffi_init(const char *module_name, Py_ssize_t version,
                            const struct _cffi_type_context_s *ctx)
{
    PyObject *module, *o_arg, *new_module;
    void *raw[] = {
        (void *)module_name,
        (void *)version,
        (void *)_cffi_exports,
        (void *)ctx,
    };

    module = PyImport_ImportModule("_cffi_backend");
    if (module == NULL)
        goto failure;

    o_arg = PyLong_FromVoidPtr((void *)raw);
    if (o_arg == NULL)
        goto failure;

    new_module = PyObject_CallMethod(
        module, (char *)"_init_cffi_1_0_external_module", (char *)"O", o_arg);

    Py_DECREF(o_arg);
    Py_DECREF(module);
    return new_module;

  failure:
    Py_XDECREF(module);
    return NULL;
}


#ifdef HAVE_WCHAR_H
typedef wchar_t _cffi_wchar_t;
#else
typedef uint16_t _cffi_wchar_t;   /* same random pick as _cffi_backend.c */
#endif

_CFFI_UNUSED_FN static uint16_t _cffi_to_c_char16_t(PyObject *o)
{
    if (sizeof(_cffi_wchar_t) == 2)
        return (uint16_t)_cffi_to_c_wchar_t(o);
    else
        return (uint16_t)_cffi_to_c_wchar3216_t(o);
}

_CFFI_UNUSED_FN static PyObject *_cffi_from_c_char16_t(uint16_t x)
{
    if (sizeof(_cffi_wchar_t) == 2)
        return _cffi_from_c_wchar_t((_cffi_wchar_t)x);
    else
        return _cffi_from_c_wchar3216_t((int)x);
}

_CFFI_UNUSED_FN static int _cffi_to_c_char32_t(PyObject *o)
{
    if (sizeof(_cffi_wchar_t) == 4)
        return (int)_cffi_to_c_wchar_t(o);
    else
        return (int)_cffi_to_c_wchar3216_t(o);
}

_CFFI_UNUSED_FN static PyObject *_cffi_from_c_char32_t(int x)
{
    if (sizeof(_cffi_wchar_t) == 4)
        return _cffi_from_c_wchar_t((_cffi_wchar_t)x);
    else
        return _cffi_from_c_wchar3216_t(x);
}


/**********  end CPython-specific section  **********/
#else
_CFFI_UNUSED_FN
static void (*_cffi_call_python_org)(struct _cffi_externpy_s *, char *);
# define _cffi_call_python  _cffi_call_python_org
#endif


#define _cffi_array_len(array)   (sizeof(array) / sizeof((array)[0]))

#define _cffi_prim_int(size, sign)                                      \
    ((size) == 1 ? ((sign) ? _CFFI_PRIM_INT8  : _CFFI_PRIM_UINT8)  :    \
     (size) == 2 ? ((sign) ? _CFFI_PRIM_INT16 : _CFFI_PRIM_UINT16) :    \
     (size) == 4 ? ((sign) ? _CFFI_PRIM_INT32 : _CFFI_PRIM_UINT32) :    \
     (size) == 8 ? ((sign) ? _CFFI_PRIM_INT64 : _CFFI_PRIM_UINT64) :    \
     _CFFI__UNKNOWN_PRIM)

#define _cffi_prim_float(size)                                          \
    ((size) == sizeof(float) ? _CFFI_PRIM_FLOAT :                       \
     (size) == sizeof(double) ? _CFFI_PRIM_DOUBLE :                     \
     (size) == sizeof(long double) ? _CFFI__UNKNOWN_LONG_DOUBLE :       \
     _CFFI__UNKNOWN_FLOAT_PRIM)

#define _cffi_check_int(got, got_nonpos, expected)      \
    ((got_nonpos) == (expected <= 0) &&                 \
     (got) == (unsigned long long)expected)

#ifdef MS_WIN32
# define _cffi_stdcall  __stdcall
#else
# define _cffi_stdcall  /* nothing */
#endif

#ifdef __cplusplus
}
#endif

/************************************************************/

/******************************************************************************
 *                      Code generated with sympy 1.1.1                       *
 *                                                                            *
 *              See http://www.sympy.org/ for more information.               *
 *                                                                            *
 *                         This file is part of 'ekf'                         *
 ******************************************************************************/
void err_fun(double *nom_x, double *delta_x, double *out_3826149132230839283) {
   out_3826149132230839283[0] = delta_x[0] + nom_x[0];
   out_3826149132230839283[1] = delta_x[1] + nom_x[1];
   out_3826149132230839283[2] = delta_x[2] + nom_x[2];
   out_3826149132230839283[3] = delta_x[3] + nom_x[3];
   out_3826149132230839283[4] = delta_x[4] + nom_x[4];
   out_3826149132230839283[5] = delta_x[5] + nom_x[5];
   out_3826149132230839283[6] = delta_x[6] + nom_x[6];
   out_3826149132230839283[7] = delta_x[7] + nom_x[7];
   out_3826149132230839283[8] = delta_x[8] + nom_x[8];
   out_3826149132230839283[9] = delta_x[9] + nom_x[9];
   out_3826149132230839283[10] = delta_x[10] + nom_x[10];
   out_3826149132230839283[11] = delta_x[11] + nom_x[11];
   out_3826149132230839283[12] = delta_x[12] + nom_x[12];
}
void inv_err_fun(double *nom_x, double *true_x, double *out_8151328542980574746) {
   out_8151328542980574746[0] = -nom_x[0] + true_x[0];
   out_8151328542980574746[1] = -nom_x[1] + true_x[1];
   out_8151328542980574746[2] = -nom_x[2] + true_x[2];
   out_8151328542980574746[3] = -nom_x[3] + true_x[3];
   out_8151328542980574746[4] = -nom_x[4] + true_x[4];
   out_8151328542980574746[5] = -nom_x[5] + true_x[5];
   out_8151328542980574746[6] = -nom_x[6] + true_x[6];
   out_8151328542980574746[7] = -nom_x[7] + true_x[7];
   out_8151328542980574746[8] = -nom_x[8] + true_x[8];
   out_8151328542980574746[9] = -nom_x[9] + true_x[9];
   out_8151328542980574746[10] = -nom_x[10] + true_x[10];
   out_8151328542980574746[11] = -nom_x[11] + true_x[11];
   out_8151328542980574746[12] = -nom_x[12] + true_x[12];
}
void H_mod_fun(double *state, double *out_5655986027143292857) {
   out_5655986027143292857[0] = 1.0;
   out_5655986027143292857[1] = 0.0;
   out_5655986027143292857[2] = 0.0;
   out_5655986027143292857[3] = 0.0;
   out_5655986027143292857[4] = 0.0;
   out_5655986027143292857[5] = 0.0;
   out_5655986027143292857[6] = 0.0;
   out_5655986027143292857[7] = 0.0;
   out_5655986027143292857[8] = 0.0;
   out_5655986027143292857[9] = 0.0;
   out_5655986027143292857[10] = 0.0;
   out_5655986027143292857[11] = 0.0;
   out_5655986027143292857[12] = 0.0;
   out_5655986027143292857[13] = 0.0;
   out_5655986027143292857[14] = 1.0;
   out_5655986027143292857[15] = 0.0;
   out_5655986027143292857[16] = 0.0;
   out_5655986027143292857[17] = 0.0;
   out_5655986027143292857[18] = 0.0;
   out_5655986027143292857[19] = 0.0;
   out_5655986027143292857[20] = 0.0;
   out_5655986027143292857[21] = 0.0;
   out_5655986027143292857[22] = 0.0;
   out_5655986027143292857[23] = 0.0;
   out_5655986027143292857[24] = 0.0;
   out_5655986027143292857[25] = 0.0;
   out_5655986027143292857[26] = 0.0;
   out_5655986027143292857[27] = 0.0;
   out_5655986027143292857[28] = 1.0;
   out_5655986027143292857[29] = 0.0;
   out_5655986027143292857[30] = 0.0;
   out_5655986027143292857[31] = 0.0;
   out_5655986027143292857[32] = 0.0;
   out_5655986027143292857[33] = 0.0;
   out_5655986027143292857[34] = 0.0;
   out_5655986027143292857[35] = 0.0;
   out_5655986027143292857[36] = 0.0;
   out_5655986027143292857[37] = 0.0;
   out_5655986027143292857[38] = 0.0;
   out_5655986027143292857[39] = 0.0;
   out_5655986027143292857[40] = 0.0;
   out_5655986027143292857[41] = 0.0;
   out_5655986027143292857[42] = 1.0;
   out_5655986027143292857[43] = 0.0;
   out_5655986027143292857[44] = 0.0;
   out_5655986027143292857[45] = 0.0;
   out_5655986027143292857[46] = 0.0;
   out_5655986027143292857[47] = 0.0;
   out_5655986027143292857[48] = 0.0;
   out_5655986027143292857[49] = 0.0;
   out_5655986027143292857[50] = 0.0;
   out_5655986027143292857[51] = 0.0;
   out_5655986027143292857[52] = 0.0;
   out_5655986027143292857[53] = 0.0;
   out_5655986027143292857[54] = 0.0;
   out_5655986027143292857[55] = 0.0;
   out_5655986027143292857[56] = 1.0;
   out_5655986027143292857[57] = 0.0;
   out_5655986027143292857[58] = 0.0;
   out_5655986027143292857[59] = 0.0;
   out_5655986027143292857[60] = 0.0;
   out_5655986027143292857[61] = 0.0;
   out_5655986027143292857[62] = 0.0;
   out_5655986027143292857[63] = 0.0;
   out_5655986027143292857[64] = 0.0;
   out_5655986027143292857[65] = 0.0;
   out_5655986027143292857[66] = 0.0;
   out_5655986027143292857[67] = 0.0;
   out_5655986027143292857[68] = 0.0;
   out_5655986027143292857[69] = 0.0;
   out_5655986027143292857[70] = 1.0;
   out_5655986027143292857[71] = 0.0;
   out_5655986027143292857[72] = 0.0;
   out_5655986027143292857[73] = 0.0;
   out_5655986027143292857[74] = 0.0;
   out_5655986027143292857[75] = 0.0;
   out_5655986027143292857[76] = 0.0;
   out_5655986027143292857[77] = 0.0;
   out_5655986027143292857[78] = 0.0;
   out_5655986027143292857[79] = 0.0;
   out_5655986027143292857[80] = 0.0;
   out_5655986027143292857[81] = 0.0;
   out_5655986027143292857[82] = 0.0;
   out_5655986027143292857[83] = 0.0;
   out_5655986027143292857[84] = 1.0;
   out_5655986027143292857[85] = 0.0;
   out_5655986027143292857[86] = 0.0;
   out_5655986027143292857[87] = 0.0;
   out_5655986027143292857[88] = 0.0;
   out_5655986027143292857[89] = 0.0;
   out_5655986027143292857[90] = 0.0;
   out_5655986027143292857[91] = 0.0;
   out_5655986027143292857[92] = 0.0;
   out_5655986027143292857[93] = 0.0;
   out_5655986027143292857[94] = 0.0;
   out_5655986027143292857[95] = 0.0;
   out_5655986027143292857[96] = 0.0;
   out_5655986027143292857[97] = 0.0;
   out_5655986027143292857[98] = 1.0;
   out_5655986027143292857[99] = 0.0;
   out_5655986027143292857[100] = 0.0;
   out_5655986027143292857[101] = 0.0;
   out_5655986027143292857[102] = 0.0;
   out_5655986027143292857[103] = 0.0;
   out_5655986027143292857[104] = 0.0;
   out_5655986027143292857[105] = 0.0;
   out_5655986027143292857[106] = 0.0;
   out_5655986027143292857[107] = 0.0;
   out_5655986027143292857[108] = 0.0;
   out_5655986027143292857[109] = 0.0;
   out_5655986027143292857[110] = 0.0;
   out_5655986027143292857[111] = 0.0;
   out_5655986027143292857[112] = 1.0;
   out_5655986027143292857[113] = 0.0;
   out_5655986027143292857[114] = 0.0;
   out_5655986027143292857[115] = 0.0;
   out_5655986027143292857[116] = 0.0;
   out_5655986027143292857[117] = 0.0;
   out_5655986027143292857[118] = 0.0;
   out_5655986027143292857[119] = 0.0;
   out_5655986027143292857[120] = 0.0;
   out_5655986027143292857[121] = 0.0;
   out_5655986027143292857[122] = 0.0;
   out_5655986027143292857[123] = 0.0;
   out_5655986027143292857[124] = 0.0;
   out_5655986027143292857[125] = 0.0;
   out_5655986027143292857[126] = 1.0;
   out_5655986027143292857[127] = 0.0;
   out_5655986027143292857[128] = 0.0;
   out_5655986027143292857[129] = 0.0;
   out_5655986027143292857[130] = 0.0;
   out_5655986027143292857[131] = 0.0;
   out_5655986027143292857[132] = 0.0;
   out_5655986027143292857[133] = 0.0;
   out_5655986027143292857[134] = 0.0;
   out_5655986027143292857[135] = 0.0;
   out_5655986027143292857[136] = 0.0;
   out_5655986027143292857[137] = 0.0;
   out_5655986027143292857[138] = 0.0;
   out_5655986027143292857[139] = 0.0;
   out_5655986027143292857[140] = 1.0;
   out_5655986027143292857[141] = 0.0;
   out_5655986027143292857[142] = 0.0;
   out_5655986027143292857[143] = 0.0;
   out_5655986027143292857[144] = 0.0;
   out_5655986027143292857[145] = 0.0;
   out_5655986027143292857[146] = 0.0;
   out_5655986027143292857[147] = 0.0;
   out_5655986027143292857[148] = 0.0;
   out_5655986027143292857[149] = 0.0;
   out_5655986027143292857[150] = 0.0;
   out_5655986027143292857[151] = 0.0;
   out_5655986027143292857[152] = 0.0;
   out_5655986027143292857[153] = 0.0;
   out_5655986027143292857[154] = 1.0;
   out_5655986027143292857[155] = 0.0;
   out_5655986027143292857[156] = 0.0;
   out_5655986027143292857[157] = 0.0;
   out_5655986027143292857[158] = 0.0;
   out_5655986027143292857[159] = 0.0;
   out_5655986027143292857[160] = 0.0;
   out_5655986027143292857[161] = 0.0;
   out_5655986027143292857[162] = 0.0;
   out_5655986027143292857[163] = 0.0;
   out_5655986027143292857[164] = 0.0;
   out_5655986027143292857[165] = 0.0;
   out_5655986027143292857[166] = 0.0;
   out_5655986027143292857[167] = 0.0;
   out_5655986027143292857[168] = 1.0;
}
void f_fun(double *state, double dt, double *out_2426912954331896736) {
   out_2426912954331896736[0] = dt*state[10] + state[0];
   out_2426912954331896736[1] = dt*state[11] + state[1];
   out_2426912954331896736[2] = dt*state[12] + state[2];
   out_2426912954331896736[3] = state[3];
   out_2426912954331896736[4] = state[4];
   out_2426912954331896736[5] = state[5];
   out_2426912954331896736[6] = state[6];
   out_2426912954331896736[7] = state[7];
   out_2426912954331896736[8] = state[8];
   out_2426912954331896736[9] = state[9];
   out_2426912954331896736[10] = state[10];
   out_2426912954331896736[11] = state[11];
   out_2426912954331896736[12] = state[12];
}
void F_fun(double *state, double dt, double *out_1828163745478812813) {
   out_1828163745478812813[0] = 1;
   out_1828163745478812813[1] = 0;
   out_1828163745478812813[2] = 0;
   out_1828163745478812813[3] = 0;
   out_1828163745478812813[4] = 0;
   out_1828163745478812813[5] = 0;
   out_1828163745478812813[6] = 0;
   out_1828163745478812813[7] = 0;
   out_1828163745478812813[8] = 0;
   out_1828163745478812813[9] = 0;
   out_1828163745478812813[10] = dt;
   out_1828163745478812813[11] = 0;
   out_1828163745478812813[12] = 0;
   out_1828163745478812813[13] = 0;
   out_1828163745478812813[14] = 1;
   out_1828163745478812813[15] = 0;
   out_1828163745478812813[16] = 0;
   out_1828163745478812813[17] = 0;
   out_1828163745478812813[18] = 0;
   out_1828163745478812813[19] = 0;
   out_1828163745478812813[20] = 0;
   out_1828163745478812813[21] = 0;
   out_1828163745478812813[22] = 0;
   out_1828163745478812813[23] = 0;
   out_1828163745478812813[24] = dt;
   out_1828163745478812813[25] = 0;
   out_1828163745478812813[26] = 0;
   out_1828163745478812813[27] = 0;
   out_1828163745478812813[28] = 1;
   out_1828163745478812813[29] = 0;
   out_1828163745478812813[30] = 0;
   out_1828163745478812813[31] = 0;
   out_1828163745478812813[32] = 0;
   out_1828163745478812813[33] = 0;
   out_1828163745478812813[34] = 0;
   out_1828163745478812813[35] = 0;
   out_1828163745478812813[36] = 0;
   out_1828163745478812813[37] = 0;
   out_1828163745478812813[38] = dt;
   out_1828163745478812813[39] = 0;
   out_1828163745478812813[40] = 0;
   out_1828163745478812813[41] = 0;
   out_1828163745478812813[42] = 1;
   out_1828163745478812813[43] = 0;
   out_1828163745478812813[44] = 0;
   out_1828163745478812813[45] = 0;
   out_1828163745478812813[46] = 0;
   out_1828163745478812813[47] = 0;
   out_1828163745478812813[48] = 0;
   out_1828163745478812813[49] = 0;
   out_1828163745478812813[50] = 0;
   out_1828163745478812813[51] = 0;
   out_1828163745478812813[52] = 0;
   out_1828163745478812813[53] = 0;
   out_1828163745478812813[54] = 0;
   out_1828163745478812813[55] = 0;
   out_1828163745478812813[56] = 1;
   out_1828163745478812813[57] = 0;
   out_1828163745478812813[58] = 0;
   out_1828163745478812813[59] = 0;
   out_1828163745478812813[60] = 0;
   out_1828163745478812813[61] = 0;
   out_1828163745478812813[62] = 0;
   out_1828163745478812813[63] = 0;
   out_1828163745478812813[64] = 0;
   out_1828163745478812813[65] = 0;
   out_1828163745478812813[66] = 0;
   out_1828163745478812813[67] = 0;
   out_1828163745478812813[68] = 0;
   out_1828163745478812813[69] = 0;
   out_1828163745478812813[70] = 1;
   out_1828163745478812813[71] = 0;
   out_1828163745478812813[72] = 0;
   out_1828163745478812813[73] = 0;
   out_1828163745478812813[74] = 0;
   out_1828163745478812813[75] = 0;
   out_1828163745478812813[76] = 0;
   out_1828163745478812813[77] = 0;
   out_1828163745478812813[78] = 0;
   out_1828163745478812813[79] = 0;
   out_1828163745478812813[80] = 0;
   out_1828163745478812813[81] = 0;
   out_1828163745478812813[82] = 0;
   out_1828163745478812813[83] = 0;
   out_1828163745478812813[84] = 1;
   out_1828163745478812813[85] = 0;
   out_1828163745478812813[86] = 0;
   out_1828163745478812813[87] = 0;
   out_1828163745478812813[88] = 0;
   out_1828163745478812813[89] = 0;
   out_1828163745478812813[90] = 0;
   out_1828163745478812813[91] = 0;
   out_1828163745478812813[92] = 0;
   out_1828163745478812813[93] = 0;
   out_1828163745478812813[94] = 0;
   out_1828163745478812813[95] = 0;
   out_1828163745478812813[96] = 0;
   out_1828163745478812813[97] = 0;
   out_1828163745478812813[98] = 1;
   out_1828163745478812813[99] = 0;
   out_1828163745478812813[100] = 0;
   out_1828163745478812813[101] = 0;
   out_1828163745478812813[102] = 0;
   out_1828163745478812813[103] = 0;
   out_1828163745478812813[104] = 0;
   out_1828163745478812813[105] = 0;
   out_1828163745478812813[106] = 0;
   out_1828163745478812813[107] = 0;
   out_1828163745478812813[108] = 0;
   out_1828163745478812813[109] = 0;
   out_1828163745478812813[110] = 0;
   out_1828163745478812813[111] = 0;
   out_1828163745478812813[112] = 1;
   out_1828163745478812813[113] = 0;
   out_1828163745478812813[114] = 0;
   out_1828163745478812813[115] = 0;
   out_1828163745478812813[116] = 0;
   out_1828163745478812813[117] = 0;
   out_1828163745478812813[118] = 0;
   out_1828163745478812813[119] = 0;
   out_1828163745478812813[120] = 0;
   out_1828163745478812813[121] = 0;
   out_1828163745478812813[122] = 0;
   out_1828163745478812813[123] = 0;
   out_1828163745478812813[124] = 0;
   out_1828163745478812813[125] = 0;
   out_1828163745478812813[126] = 1;
   out_1828163745478812813[127] = 0;
   out_1828163745478812813[128] = 0;
   out_1828163745478812813[129] = 0;
   out_1828163745478812813[130] = 0;
   out_1828163745478812813[131] = 0;
   out_1828163745478812813[132] = 0;
   out_1828163745478812813[133] = 0;
   out_1828163745478812813[134] = 0;
   out_1828163745478812813[135] = 0;
   out_1828163745478812813[136] = 0;
   out_1828163745478812813[137] = 0;
   out_1828163745478812813[138] = 0;
   out_1828163745478812813[139] = 0;
   out_1828163745478812813[140] = 1;
   out_1828163745478812813[141] = 0;
   out_1828163745478812813[142] = 0;
   out_1828163745478812813[143] = 0;
   out_1828163745478812813[144] = 0;
   out_1828163745478812813[145] = 0;
   out_1828163745478812813[146] = 0;
   out_1828163745478812813[147] = 0;
   out_1828163745478812813[148] = 0;
   out_1828163745478812813[149] = 0;
   out_1828163745478812813[150] = 0;
   out_1828163745478812813[151] = 0;
   out_1828163745478812813[152] = 0;
   out_1828163745478812813[153] = 0;
   out_1828163745478812813[154] = 1;
   out_1828163745478812813[155] = 0;
   out_1828163745478812813[156] = 0;
   out_1828163745478812813[157] = 0;
   out_1828163745478812813[158] = 0;
   out_1828163745478812813[159] = 0;
   out_1828163745478812813[160] = 0;
   out_1828163745478812813[161] = 0;
   out_1828163745478812813[162] = 0;
   out_1828163745478812813[163] = 0;
   out_1828163745478812813[164] = 0;
   out_1828163745478812813[165] = 0;
   out_1828163745478812813[166] = 0;
   out_1828163745478812813[167] = 0;
   out_1828163745478812813[168] = 1;
}
void h_3(double *state, double *unused, double *out_4528959146572613286) {
   out_4528959146572613286[0] = sqrt(pow(state[0], 2) + pow(state[1], 2) + pow(state[2], 2))*state[9];
}
void H_3(double *state, double *unused, double *out_4776213603435969308) {
   out_4776213603435969308[0] = state[0]*state[9]/sqrt(pow(state[0], 2) + pow(state[1], 2) + pow(state[2], 2));
   out_4776213603435969308[1] = state[1]*state[9]/sqrt(pow(state[0], 2) + pow(state[1], 2) + pow(state[2], 2));
   out_4776213603435969308[2] = state[2]*state[9]/sqrt(pow(state[0], 2) + pow(state[1], 2) + pow(state[2], 2));
   out_4776213603435969308[3] = 0;
   out_4776213603435969308[4] = 0;
   out_4776213603435969308[5] = 0;
   out_4776213603435969308[6] = 0;
   out_4776213603435969308[7] = 0;
   out_4776213603435969308[8] = 0;
   out_4776213603435969308[9] = sqrt(pow(state[0], 2) + pow(state[1], 2) + pow(state[2], 2));
   out_4776213603435969308[10] = 0;
   out_4776213603435969308[11] = 0;
   out_4776213603435969308[12] = 0;
}
void h_4(double *state, double *unused, double *out_7897607812907042004) {
   out_7897607812907042004[0] = state[3] + state[6];
   out_7897607812907042004[1] = state[4] + state[7];
   out_7897607812907042004[2] = state[5] + state[8];
}
void H_4(double *state, double *unused, double *out_7822787049155785962) {
   out_7822787049155785962[0] = 0;
   out_7822787049155785962[1] = 0;
   out_7822787049155785962[2] = 0;
   out_7822787049155785962[3] = 1;
   out_7822787049155785962[4] = 0;
   out_7822787049155785962[5] = 0;
   out_7822787049155785962[6] = 1;
   out_7822787049155785962[7] = 0;
   out_7822787049155785962[8] = 0;
   out_7822787049155785962[9] = 0;
   out_7822787049155785962[10] = 0;
   out_7822787049155785962[11] = 0;
   out_7822787049155785962[12] = 0;
   out_7822787049155785962[13] = 0;
   out_7822787049155785962[14] = 0;
   out_7822787049155785962[15] = 0;
   out_7822787049155785962[16] = 0;
   out_7822787049155785962[17] = 1;
   out_7822787049155785962[18] = 0;
   out_7822787049155785962[19] = 0;
   out_7822787049155785962[20] = 1;
   out_7822787049155785962[21] = 0;
   out_7822787049155785962[22] = 0;
   out_7822787049155785962[23] = 0;
   out_7822787049155785962[24] = 0;
   out_7822787049155785962[25] = 0;
   out_7822787049155785962[26] = 0;
   out_7822787049155785962[27] = 0;
   out_7822787049155785962[28] = 0;
   out_7822787049155785962[29] = 0;
   out_7822787049155785962[30] = 0;
   out_7822787049155785962[31] = 1;
   out_7822787049155785962[32] = 0;
   out_7822787049155785962[33] = 0;
   out_7822787049155785962[34] = 1;
   out_7822787049155785962[35] = 0;
   out_7822787049155785962[36] = 0;
   out_7822787049155785962[37] = 0;
   out_7822787049155785962[38] = 0;
}
void h_9(double *state, double *unused, double *out_5299392560341573238) {
   out_5299392560341573238[0] = state[3];
   out_5299392560341573238[1] = state[4];
   out_5299392560341573238[2] = state[5];
}
void H_9(double *state, double *unused, double *out_2816358492518891651) {
   out_2816358492518891651[0] = 0;
   out_2816358492518891651[1] = 0;
   out_2816358492518891651[2] = 0;
   out_2816358492518891651[3] = 1;
   out_2816358492518891651[4] = 0;
   out_2816358492518891651[5] = 0;
   out_2816358492518891651[6] = 0;
   out_2816358492518891651[7] = 0;
   out_2816358492518891651[8] = 0;
   out_2816358492518891651[9] = 0;
   out_2816358492518891651[10] = 0;
   out_2816358492518891651[11] = 0;
   out_2816358492518891651[12] = 0;
   out_2816358492518891651[13] = 0;
   out_2816358492518891651[14] = 0;
   out_2816358492518891651[15] = 0;
   out_2816358492518891651[16] = 0;
   out_2816358492518891651[17] = 1;
   out_2816358492518891651[18] = 0;
   out_2816358492518891651[19] = 0;
   out_2816358492518891651[20] = 0;
   out_2816358492518891651[21] = 0;
   out_2816358492518891651[22] = 0;
   out_2816358492518891651[23] = 0;
   out_2816358492518891651[24] = 0;
   out_2816358492518891651[25] = 0;
   out_2816358492518891651[26] = 0;
   out_2816358492518891651[27] = 0;
   out_2816358492518891651[28] = 0;
   out_2816358492518891651[29] = 0;
   out_2816358492518891651[30] = 0;
   out_2816358492518891651[31] = 1;
   out_2816358492518891651[32] = 0;
   out_2816358492518891651[33] = 0;
   out_2816358492518891651[34] = 0;
   out_2816358492518891651[35] = 0;
   out_2816358492518891651[36] = 0;
   out_2816358492518891651[37] = 0;
   out_2816358492518891651[38] = 0;
}
void h_13(double *state, double *unused, double *out_4549566257314944719) {
   out_4549566257314944719[0] = state[0];
   out_4549566257314944719[1] = state[1];
   out_4549566257314944719[2] = state[2];
}
void H_13(double *state, double *unused, double *out_3504968933202572761) {
   out_3504968933202572761[0] = 1;
   out_3504968933202572761[1] = 0;
   out_3504968933202572761[2] = 0;
   out_3504968933202572761[3] = 0;
   out_3504968933202572761[4] = 0;
   out_3504968933202572761[5] = 0;
   out_3504968933202572761[6] = 0;
   out_3504968933202572761[7] = 0;
   out_3504968933202572761[8] = 0;
   out_3504968933202572761[9] = 0;
   out_3504968933202572761[10] = 0;
   out_3504968933202572761[11] = 0;
   out_3504968933202572761[12] = 0;
   out_3504968933202572761[13] = 0;
   out_3504968933202572761[14] = 1;
   out_3504968933202572761[15] = 0;
   out_3504968933202572761[16] = 0;
   out_3504968933202572761[17] = 0;
   out_3504968933202572761[18] = 0;
   out_3504968933202572761[19] = 0;
   out_3504968933202572761[20] = 0;
   out_3504968933202572761[21] = 0;
   out_3504968933202572761[22] = 0;
   out_3504968933202572761[23] = 0;
   out_3504968933202572761[24] = 0;
   out_3504968933202572761[25] = 0;
   out_3504968933202572761[26] = 0;
   out_3504968933202572761[27] = 0;
   out_3504968933202572761[28] = 1;
   out_3504968933202572761[29] = 0;
   out_3504968933202572761[30] = 0;
   out_3504968933202572761[31] = 0;
   out_3504968933202572761[32] = 0;
   out_3504968933202572761[33] = 0;
   out_3504968933202572761[34] = 0;
   out_3504968933202572761[35] = 0;
   out_3504968933202572761[36] = 0;
   out_3504968933202572761[37] = 0;
   out_3504968933202572761[38] = 0;
}
void h_14(double *state, double *unused, double *out_5299392560341573238) {
   out_5299392560341573238[0] = state[3];
   out_5299392560341573238[1] = state[4];
   out_5299392560341573238[2] = state[5];
}
void H_14(double *state, double *unused, double *out_2816358492518891651) {
   out_2816358492518891651[0] = 0;
   out_2816358492518891651[1] = 0;
   out_2816358492518891651[2] = 0;
   out_2816358492518891651[3] = 1;
   out_2816358492518891651[4] = 0;
   out_2816358492518891651[5] = 0;
   out_2816358492518891651[6] = 0;
   out_2816358492518891651[7] = 0;
   out_2816358492518891651[8] = 0;
   out_2816358492518891651[9] = 0;
   out_2816358492518891651[10] = 0;
   out_2816358492518891651[11] = 0;
   out_2816358492518891651[12] = 0;
   out_2816358492518891651[13] = 0;
   out_2816358492518891651[14] = 0;
   out_2816358492518891651[15] = 0;
   out_2816358492518891651[16] = 0;
   out_2816358492518891651[17] = 1;
   out_2816358492518891651[18] = 0;
   out_2816358492518891651[19] = 0;
   out_2816358492518891651[20] = 0;
   out_2816358492518891651[21] = 0;
   out_2816358492518891651[22] = 0;
   out_2816358492518891651[23] = 0;
   out_2816358492518891651[24] = 0;
   out_2816358492518891651[25] = 0;
   out_2816358492518891651[26] = 0;
   out_2816358492518891651[27] = 0;
   out_2816358492518891651[28] = 0;
   out_2816358492518891651[29] = 0;
   out_2816358492518891651[30] = 0;
   out_2816358492518891651[31] = 1;
   out_2816358492518891651[32] = 0;
   out_2816358492518891651[33] = 0;
   out_2816358492518891651[34] = 0;
   out_2816358492518891651[35] = 0;
   out_2816358492518891651[36] = 0;
   out_2816358492518891651[37] = 0;
   out_2816358492518891651[38] = 0;
}
#define DIM 13
#define EDIM 13
#define MEDIM 13
typedef void (*Hfun)(double *, double *, double *);

void predict(double *x, double *P, double *Q, double dt);
const static double MAHA_THRESH_3 = 3.841459;
void update_3(double *, double *, double *, double *, double *);
const static double MAHA_THRESH_4 = 7.814728;
void update_4(double *, double *, double *, double *, double *);
const static double MAHA_THRESH_9 = 7.814728;
void update_9(double *, double *, double *, double *, double *);
const static double MAHA_THRESH_13 = 7.814728;
void update_13(double *, double *, double *, double *, double *);
const static double MAHA_THRESH_14 = 7.814728;
void update_14(double *, double *, double *, double *, double *);
#include <eigen3/Eigen/Dense>
#include <iostream>

typedef Eigen::Matrix<double, DIM, DIM, Eigen::RowMajor> DDM;
typedef Eigen::Matrix<double, EDIM, EDIM, Eigen::RowMajor> EEM;
typedef Eigen::Matrix<double, DIM, EDIM, Eigen::RowMajor> DEM;

void predict(double *in_x, double *in_P, double *in_Q, double dt) {
  typedef Eigen::Matrix<double, MEDIM, MEDIM, Eigen::RowMajor> RRM;
  
  double nx[DIM] = {0};
  double in_F[EDIM*EDIM] = {0};

  // functions from sympy
  f_fun(in_x, dt, nx);
  F_fun(in_x, dt, in_F);


  EEM F(in_F);
  EEM P(in_P);
  EEM Q(in_Q);

  RRM F_main = F.topLeftCorner(MEDIM, MEDIM);
  P.topLeftCorner(MEDIM, MEDIM) = (F_main * P.topLeftCorner(MEDIM, MEDIM)) * F_main.transpose();
  P.topRightCorner(MEDIM, EDIM - MEDIM) = F_main * P.topRightCorner(MEDIM, EDIM - MEDIM);
  P.bottomLeftCorner(EDIM - MEDIM, MEDIM) = P.bottomLeftCorner(EDIM - MEDIM, MEDIM) * F_main.transpose();

  P = P + dt*Q;

  // copy out state
  memcpy(in_x, nx, DIM * sizeof(double));
  memcpy(in_P, P.data(), EDIM * EDIM * sizeof(double));
}

// note: extra_args dim only correct when null space projecting
// otherwise 1
template <int ZDIM, int EADIM, bool MAHA_TEST>
void update(double *in_x, double *in_P, Hfun h_fun, Hfun H_fun, Hfun Hea_fun, double *in_z, double *in_R, double *in_ea, double MAHA_THRESHOLD) {
  typedef Eigen::Matrix<double, ZDIM, ZDIM, Eigen::RowMajor> ZZM;
  typedef Eigen::Matrix<double, ZDIM, DIM, Eigen::RowMajor> ZDM;
  typedef Eigen::Matrix<double, ZDIM, EDIM, Eigen::RowMajor> ZEM;
  typedef Eigen::Matrix<double, Eigen::Dynamic, EDIM, Eigen::RowMajor> XEM;
  typedef Eigen::Matrix<double, EDIM, ZDIM, Eigen::RowMajor> EZM;
  typedef Eigen::Matrix<double, Eigen::Dynamic, 1> X1M;
  typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> XXM;

  double in_hx[ZDIM] = {0};
  double in_H[ZDIM * DIM] = {0};
  double in_H_mod[EDIM * DIM] = {0};
  double delta_x[EDIM] = {0};
  double x_new[DIM] = {0};


  // state x, P
  Eigen::Matrix<double, ZDIM, 1> z(in_z);
  EEM P(in_P);
  ZZM pre_R(in_R);
  
  // functions from sympy
  h_fun(in_x, in_ea, in_hx);
  H_fun(in_x, in_ea, in_H);
  ZDM pre_H(in_H); 
  
  // get y (y = z - hx)
  Eigen::Matrix<double, ZDIM, 1> pre_y(in_hx); pre_y = z - pre_y;
  X1M y; XXM H; XXM R;
  if (Hea_fun){
    typedef Eigen::Matrix<double, ZDIM, EADIM, Eigen::RowMajor> ZAM;
    double in_Hea[ZDIM * EADIM] = {0};
    Hea_fun(in_x, in_ea, in_Hea);
    ZAM Hea(in_Hea);
    XXM A = Hea.transpose().fullPivLu().kernel();
   

    y = A.transpose() * pre_y;
    H = A.transpose() * pre_H;
    R = A.transpose() * pre_R * A;
  } else {
    y = pre_y;
    H = pre_H;
    R = pre_R;
  }
  // get modified H
  H_mod_fun(in_x, in_H_mod);
  DEM H_mod(in_H_mod);
  XEM H_err = H * H_mod;
  
  // Do mahalobis distance test
  if (MAHA_TEST){
    XXM a = (H_err * P * H_err.transpose() + R).inverse();
    double maha_dist = y.transpose() * a * y;
    if (maha_dist > MAHA_THRESHOLD){
      R = 1.0e16 * R;
    }
  }

  // Outlier resilient weighting
  double weight = 1;//(1.5)/(1 + y.squaredNorm()/R.sum());

  // kalman gains and I_KH
  XXM S = ((H_err * P) * H_err.transpose()) + R/weight;
  XEM KT = S.fullPivLu().solve(H_err * P.transpose());
  //EZM K = KT.transpose(); TODO: WHY DOES THIS NOT COMPILE?
  //EZM K = S.fullPivLu().solve(H_err * P.transpose()).transpose();
  //std::cout << "Here is the matrix rot:\n" << K << std::endl;
  EEM I_KH = Eigen::Matrix<double, EDIM, EDIM>::Identity() - (KT.transpose() * H_err);

  // update state by injecting dx
  Eigen::Matrix<double, EDIM, 1> dx(delta_x);
  dx  = (KT.transpose() * y);
  memcpy(delta_x, dx.data(), EDIM * sizeof(double));
  err_fun(in_x, delta_x, x_new);
  Eigen::Matrix<double, DIM, 1> x(x_new);
 
  // update cov 
  P = ((I_KH * P) * I_KH.transpose()) + ((KT.transpose() * R) * KT);

  // copy out state
  memcpy(in_x, x.data(), DIM * sizeof(double));
  memcpy(in_P, P.data(), EDIM * EDIM * sizeof(double));
  memcpy(in_z, y.data(), y.rows() * sizeof(double));
}




      void update_3(double *in_x, double *in_P, double *in_z, double *in_R, double *in_ea) {
        update<1,3,0>(in_x, in_P, h_3, H_3, NULL, in_z, in_R, in_ea, MAHA_THRESH_3);
      }
    
      void update_4(double *in_x, double *in_P, double *in_z, double *in_R, double *in_ea) {
        update<3,3,0>(in_x, in_P, h_4, H_4, NULL, in_z, in_R, in_ea, MAHA_THRESH_4);
      }
    
      void update_9(double *in_x, double *in_P, double *in_z, double *in_R, double *in_ea) {
        update<3,3,0>(in_x, in_P, h_9, H_9, NULL, in_z, in_R, in_ea, MAHA_THRESH_9);
      }
    
      void update_13(double *in_x, double *in_P, double *in_z, double *in_R, double *in_ea) {
        update<3,3,0>(in_x, in_P, h_13, H_13, NULL, in_z, in_R, in_ea, MAHA_THRESH_13);
      }
    
      void update_14(double *in_x, double *in_P, double *in_z, double *in_R, double *in_ea) {
        update<3,3,0>(in_x, in_P, h_14, H_14, NULL, in_z, in_R, in_ea, MAHA_THRESH_14);
      }
    

/************************************************************/

static void *_cffi_types[] = {
/*  0 */ _CFFI_OP(_CFFI_OP_FUNCTION, 28), // void()(double *, double *)
/*  1 */ _CFFI_OP(_CFFI_OP_POINTER, 20), // double *
/*  2 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/*  3 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/*  4 */ _CFFI_OP(_CFFI_OP_FUNCTION, 28), // void()(double *, double *, double *)
/*  5 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/*  6 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/*  7 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/*  8 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/*  9 */ _CFFI_OP(_CFFI_OP_FUNCTION, 28), // void()(double *, double *, double *, double *, double *)
/* 10 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 11 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 12 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 13 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 14 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 15 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 16 */ _CFFI_OP(_CFFI_OP_FUNCTION, 28), // void()(double *, double *, double *, double)
/* 17 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 18 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 19 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 20 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 14), // double
/* 21 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 22 */ _CFFI_OP(_CFFI_OP_FUNCTION, 28), // void()(double *, double, double *)
/* 23 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 24 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 14),
/* 25 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 26 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 27 */ _CFFI_OP(_CFFI_OP_POINTER, 4), // void(*)(double *, double *, double *)
/* 28 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 0), // void
};

static void _cffi_const_MAHA_THRESH_13(char *o)
{
  *(double *)o = MAHA_THRESH_13;
}

static void _cffi_const_MAHA_THRESH_14(char *o)
{
  *(double *)o = MAHA_THRESH_14;
}

static void _cffi_const_MAHA_THRESH_3(char *o)
{
  *(double *)o = MAHA_THRESH_3;
}

static void _cffi_const_MAHA_THRESH_4(char *o)
{
  *(double *)o = MAHA_THRESH_4;
}

static void _cffi_const_MAHA_THRESH_9(char *o)
{
  *(double *)o = MAHA_THRESH_9;
}

static void _cffi_d_F_fun(double * x0, double x1, double * x2)
{
  F_fun(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_F_fun(PyObject *self, PyObject *args)
{
  double * x0;
  double x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "F_fun", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  x1 = (double)_cffi_to_c_double(arg1);
  if (x1 == (double)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { F_fun(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_F_fun _cffi_d_F_fun
#endif

static void _cffi_d_H_13(double * x0, double * x1, double * x2)
{
  H_13(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_H_13(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "H_13", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { H_13(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_H_13 _cffi_d_H_13
#endif

static void _cffi_d_H_14(double * x0, double * x1, double * x2)
{
  H_14(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_H_14(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "H_14", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { H_14(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_H_14 _cffi_d_H_14
#endif

static void _cffi_d_H_3(double * x0, double * x1, double * x2)
{
  H_3(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_H_3(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "H_3", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { H_3(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_H_3 _cffi_d_H_3
#endif

static void _cffi_d_H_4(double * x0, double * x1, double * x2)
{
  H_4(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_H_4(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "H_4", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { H_4(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_H_4 _cffi_d_H_4
#endif

static void _cffi_d_H_9(double * x0, double * x1, double * x2)
{
  H_9(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_H_9(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "H_9", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { H_9(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_H_9 _cffi_d_H_9
#endif

static void _cffi_d_H_mod_fun(double * x0, double * x1)
{
  H_mod_fun(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_H_mod_fun(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "H_mod_fun", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { H_mod_fun(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_H_mod_fun _cffi_d_H_mod_fun
#endif

static void _cffi_d_err_fun(double * x0, double * x1, double * x2)
{
  err_fun(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_err_fun(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "err_fun", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { err_fun(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_err_fun _cffi_d_err_fun
#endif

static void _cffi_d_f_fun(double * x0, double x1, double * x2)
{
  f_fun(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_f_fun(PyObject *self, PyObject *args)
{
  double * x0;
  double x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "f_fun", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  x1 = (double)_cffi_to_c_double(arg1);
  if (x1 == (double)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { f_fun(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_f_fun _cffi_d_f_fun
#endif

static void _cffi_d_h_13(double * x0, double * x1, double * x2)
{
  h_13(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_h_13(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "h_13", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { h_13(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_h_13 _cffi_d_h_13
#endif

static void _cffi_d_h_14(double * x0, double * x1, double * x2)
{
  h_14(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_h_14(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "h_14", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { h_14(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_h_14 _cffi_d_h_14
#endif

static void _cffi_d_h_3(double * x0, double * x1, double * x2)
{
  h_3(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_h_3(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "h_3", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { h_3(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_h_3 _cffi_d_h_3
#endif

static void _cffi_d_h_4(double * x0, double * x1, double * x2)
{
  h_4(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_h_4(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "h_4", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { h_4(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_h_4 _cffi_d_h_4
#endif

static void _cffi_d_h_9(double * x0, double * x1, double * x2)
{
  h_9(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_h_9(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "h_9", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { h_9(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_h_9 _cffi_d_h_9
#endif

static void _cffi_d_inv_err_fun(double * x0, double * x1, double * x2)
{
  inv_err_fun(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_inv_err_fun(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "inv_err_fun", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { inv_err_fun(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_inv_err_fun _cffi_d_inv_err_fun
#endif

static void _cffi_d_predict(double * x0, double * x1, double * x2, double x3)
{
  predict(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_predict(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  double x3;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "predict", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  x3 = (double)_cffi_to_c_double(arg3);
  if (x3 == (double)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { predict(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_predict _cffi_d_predict
#endif

static void _cffi_d_update_13(double * x0, double * x1, double * x2, double * x3, double * x4)
{
  update_13(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_update_13(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  double * x3;
  double * x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "update_13", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (double *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(1), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (double *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(1), arg4) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { update_13(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_update_13 _cffi_d_update_13
#endif

static void _cffi_d_update_14(double * x0, double * x1, double * x2, double * x3, double * x4)
{
  update_14(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_update_14(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  double * x3;
  double * x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "update_14", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (double *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(1), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (double *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(1), arg4) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { update_14(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_update_14 _cffi_d_update_14
#endif

static void _cffi_d_update_3(double * x0, double * x1, double * x2, double * x3, double * x4)
{
  update_3(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_update_3(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  double * x3;
  double * x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "update_3", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (double *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(1), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (double *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(1), arg4) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { update_3(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_update_3 _cffi_d_update_3
#endif

static void _cffi_d_update_4(double * x0, double * x1, double * x2, double * x3, double * x4)
{
  update_4(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_update_4(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  double * x3;
  double * x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "update_4", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (double *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(1), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (double *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(1), arg4) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { update_4(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_update_4 _cffi_d_update_4
#endif

static void _cffi_d_update_9(double * x0, double * x1, double * x2, double * x3, double * x4)
{
  update_9(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_update_9(PyObject *self, PyObject *args)
{
  double * x0;
  double * x1;
  double * x2;
  double * x3;
  double * x4;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "update_9", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (double *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (double *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (double *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(1), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (double *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(1), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (double *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(1), arg4) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { update_9(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_update_9 _cffi_d_update_9
#endif

static int _cffi_const_DIM(unsigned long long *o)
{
  int n = (DIM) <= 0;
  *o = (unsigned long long)((DIM) | 0);  /* check that DIM is an integer */
  if (!_cffi_check_int(*o, n, 13U))
    n |= 2;
  return n;
}

static int _cffi_const_EDIM(unsigned long long *o)
{
  int n = (EDIM) <= 0;
  *o = (unsigned long long)((EDIM) | 0);  /* check that EDIM is an integer */
  if (!_cffi_check_int(*o, n, 13U))
    n |= 2;
  return n;
}

static int _cffi_const_MEDIM(unsigned long long *o)
{
  int n = (MEDIM) <= 0;
  *o = (unsigned long long)((MEDIM) | 0);  /* check that MEDIM is an integer */
  if (!_cffi_check_int(*o, n, 13U))
    n |= 2;
  return n;
}

static const struct _cffi_global_s _cffi_globals[] = {
  { "DIM", (void *)_cffi_const_DIM, _CFFI_OP(_CFFI_OP_CONSTANT_INT, -1), (void *)0 },
  { "EDIM", (void *)_cffi_const_EDIM, _CFFI_OP(_CFFI_OP_CONSTANT_INT, -1), (void *)0 },
  { "F_fun", (void *)_cffi_f_F_fun, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 22), (void *)_cffi_d_F_fun },
  { "H_13", (void *)_cffi_f_H_13, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_H_13 },
  { "H_14", (void *)_cffi_f_H_14, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_H_14 },
  { "H_3", (void *)_cffi_f_H_3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_H_3 },
  { "H_4", (void *)_cffi_f_H_4, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_H_4 },
  { "H_9", (void *)_cffi_f_H_9, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_H_9 },
  { "H_mod_fun", (void *)_cffi_f_H_mod_fun, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 0), (void *)_cffi_d_H_mod_fun },
  { "MAHA_THRESH_13", (void *)_cffi_const_MAHA_THRESH_13, _CFFI_OP(_CFFI_OP_CONSTANT, 20), (void *)0 },
  { "MAHA_THRESH_14", (void *)_cffi_const_MAHA_THRESH_14, _CFFI_OP(_CFFI_OP_CONSTANT, 20), (void *)0 },
  { "MAHA_THRESH_3", (void *)_cffi_const_MAHA_THRESH_3, _CFFI_OP(_CFFI_OP_CONSTANT, 20), (void *)0 },
  { "MAHA_THRESH_4", (void *)_cffi_const_MAHA_THRESH_4, _CFFI_OP(_CFFI_OP_CONSTANT, 20), (void *)0 },
  { "MAHA_THRESH_9", (void *)_cffi_const_MAHA_THRESH_9, _CFFI_OP(_CFFI_OP_CONSTANT, 20), (void *)0 },
  { "MEDIM", (void *)_cffi_const_MEDIM, _CFFI_OP(_CFFI_OP_CONSTANT_INT, -1), (void *)0 },
  { "err_fun", (void *)_cffi_f_err_fun, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_err_fun },
  { "f_fun", (void *)_cffi_f_f_fun, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 22), (void *)_cffi_d_f_fun },
  { "h_13", (void *)_cffi_f_h_13, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_h_13 },
  { "h_14", (void *)_cffi_f_h_14, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_h_14 },
  { "h_3", (void *)_cffi_f_h_3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_h_3 },
  { "h_4", (void *)_cffi_f_h_4, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_h_4 },
  { "h_9", (void *)_cffi_f_h_9, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_h_9 },
  { "inv_err_fun", (void *)_cffi_f_inv_err_fun, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_inv_err_fun },
  { "predict", (void *)_cffi_f_predict, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 16), (void *)_cffi_d_predict },
  { "update_13", (void *)_cffi_f_update_13, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 9), (void *)_cffi_d_update_13 },
  { "update_14", (void *)_cffi_f_update_14, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 9), (void *)_cffi_d_update_14 },
  { "update_3", (void *)_cffi_f_update_3, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 9), (void *)_cffi_d_update_3 },
  { "update_4", (void *)_cffi_f_update_4, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 9), (void *)_cffi_d_update_4 },
  { "update_9", (void *)_cffi_f_update_9, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 9), (void *)_cffi_d_update_9 },
};

static const struct _cffi_typename_s _cffi_typenames[] = {
  { "Hfun", 27 },
};

static const struct _cffi_type_context_s _cffi_type_context = {
  _cffi_types,
  _cffi_globals,
  NULL,  /* no fields */
  NULL,  /* no struct_unions */
  NULL,  /* no enums */
  _cffi_typenames,
  29,  /* num_globals */
  0,  /* num_struct_unions */
  0,  /* num_enums */
  1,  /* num_typenames */
  NULL,  /* no includes */
  29,  /* num_types */
  0,  /* flags */
};

#ifdef __GNUC__
#  pragma GCC visibility push(default)  /* for -fvisibility= */
#endif

#ifdef PYPY_VERSION
PyMODINIT_FUNC
_cffi_pypyinit_loc_local(const void *p[])
{
    p[0] = (const void *)0x2601;
    p[1] = &_cffi_type_context;
#if PY_MAJOR_VERSION >= 3
    return NULL;
#endif
}
#  ifdef _MSC_VER
     PyMODINIT_FUNC
#  if PY_MAJOR_VERSION >= 3
     PyInit_loc_local(void) { return NULL; }
#  else
     initloc_local(void) { }
#  endif
#  endif
#elif PY_MAJOR_VERSION >= 3
PyMODINIT_FUNC
PyInit_loc_local(void)
{
  return _cffi_init("loc_local", 0x2601, &_cffi_type_context);
}
#else
PyMODINIT_FUNC
initloc_local(void)
{
  _cffi_init("loc_local", 0x2601, &_cffi_type_context);
}
#endif

#ifdef __GNUC__
#  pragma GCC visibility pop
#endif
